# Set CMake Requirements
cmake_minimum_required( VERSION 3.6 )

# Set Debugging Controls
set( ENABLE_FILE_PRINTOUTS  False )
set( ENABLE_PATH_PRINTOUTS  False )


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#              Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Debug Printout
function( PrintPath Description PathString )
	if ( ENABLE_PATH_PRINTOUTS )
		message( ${Description} ${PathString} )
	endif()
endfunction()

# Set Warning Exclusions
# Format Of String In List: "/ignore:4297"
function( ExcludeWarnings, WarningStringList )
	foreach( WarningString  ${WarningValueList} )
		set_target_properties( ${PROJECT_NAME}  PROPERTIES  LINK_FLAGS  ${WarningString} )
	endforeach()
endfunction()


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#          Project Definitions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Set Project Name
project( LearningProject_Vulkan )

# Set Compiler Settings
set( CMAKE_CXX_STANDARD 20 )
set( CMAKE_CXX_StANDARD_REQUIRED ON )

# Define Root Directory
set( SOURCE_ROOT  "${CMAKE_SOURCE_DIR}" )
set( PROJECT_FILES_PATH  "${CMAKE_SOURCE_DIR}/LearningProject_Vulkan/" )
set( MAIN_FILTER "Source Files" )

# Define Files/Paths To Exclude
set(
	Exclude_List
	"${SOURCE_ROOT}/build/CMakeFiles/*"
	"${SOURCE_ROOT}/LearningProject_Vulkan/Main.cpp" # Remove "Main.cpp" Cause Its Added Later As Executable File
)

# Recursively Grab All Files (.c/.cpp/.h) Down From Directory
# Also Grab x64 Stuff
file(
	GLOB_RECURSE Source_File_List 
	LIST_DIRECTORIES false
    "${PROJECT_FILES_PATH}/*.c"
	"${PROJECT_FILES_PATH}/*.cpp"
    "${PROJECT_FILES_PATH}/*.h"
	"${SOURCE_ROOT}/build/x64/*"
)


# Assign PCH File To PCH_Header_File To Be Registered Later
set( PCH_Header_File  "${PROJECT_FILES_PATH}/pch/pch.h" )


# Remove All Files Contained Within The "${CMAKE_SOURCE_DIR}/build"
# Folder That Was Generated By CMAKE 
foreach( File  ${Source_File_List} )
	foreach( ExcludedFile  ${Exclude_List} )
		if ( ${File}  MATCHES  ${ExcludedFile} )
			list( REMOVE_ITEM  Source_File_List  ${File} )
		endif()
	endforeach()
endforeach()

# Print All Directories
if ( ENABLE_FILE_PRINTOUTS )
	message( "Displaying All Directories:" )
	foreach( Source_File  IN ITEMS  ${Source_File_List} )
		message( "\tDirectory: "  ${Source_File} )
	endforeach()
endif()

# Add Each File To Solution Directory - All These Are
# Dependent On Folder Categorization
	# <FolderName>                                 <FilterName>
	  # Example.cpp        ---Generates--->        # Example.cpp
	  # Example.h								   # Example.h
# **Note:
	# Multiple Files In A Single Folder Will Be Grouped
	# In The Same Filter, *Possibly* Overwriting Manually
	# Created Filters In The .sln
foreach( Source_File  IN ITEMS  ${Source_File_List} )
	# Outer Path
    get_filename_component( Source_Path  "${Source_File}"  PATH )
	PrintPath( "Source Path: "  ${Source_Path} )

	# Relative Path
    file( RELATIVE_PATH  Relative_Source_Path  "${SOURCE_ROOT}"  "${Source_Path}" )
	PrintPath( "RelativePath: "  ${Relative_Source_Path} )

    string( REPLACE  "/" "\\"  Group_Path  "${Relative_Source_Path}" )
    source_group( "${MAIN_FILTER}/${Group_Path}"  FILES  "${Source_File}" )
	PrintPath( "Group Path: "  "${Group_Path}\n" )
endforeach()


# Add Build Files To Solution Directory In VS - CMake & .bat Files
set(
	Build_Files
	${SOURCE_ROOT}/CMakeLists.txt
	${SOURCE_ROOT}/BuildSolution.bat
)
source_group( ${MAIN_FILTER}  FILES  ${Build_Files} )

# Add Main To Solution Directory In VS
source_group( ${MAIN_FILTER}  FILES  "${CMAKE_SOURCE_DIR}/LearningProject_Vulkan/Main.cpp" )

# Set MainEditor.cpp as Main Executable File
# Change Director As Required
add_executable( ${PROJECT_NAME}  "${CMAKE_SOURCE_DIR}/LearningProject_Vulkan/Main.cpp"  ${Source_File_List} )

# Set Current Project As "Startup Project"
set_property( DIRECTORY  ${CMAKE_CURRENT_SOURCE_DIR}  PROPERTY  VS_STARTUP_PROJECT  ${PROJECT_NAME} )

# Set Project's Platform Toolset Version
set_target_properties( ${PROJECT_NAME}  PROPERTIES  VS_PLATFORM_TOOLSET  "v142" )

# Add PCH To Header Files
target_precompile_headers( ${PROJECT_NAME}  PUBLIC  ${PCH_Header_File} )